1. Organize the Project Directory

Ensure your Django project is organized in a folder structure like this:

scss

/home/g2019supersam/apps/zyxe/pro
├── pro (your project folder)
├── authenticate (your app folder)
├── pro_profile (other apps like profile, etc.)
├── static (static files)
├── templates (HTML templates)
├── db.sqlite3 (or your database files)
├── manage.py
└── .env (environment variables)

2. Save Environment Variables in .env

Create a .env file in the root directory of your project /home/g2019supersam/apps/zyxe/pro. This file should contain sensitive environment variables, such as your Django secret key, database credentials, and debug settings.

Example .env file:

makefile

DJANGO_ENV=production
DJANGO_SETTINGS_MODULE=pro.settings.production
SECRET_KEY=your_secret_key_here
DATABASE_URL=postgres://username:password@localhost:5432/dbname
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com

How to create it:

    Use your preferred text editor:

    bash

    nano .env

3. Configure wsgi.py for Gunicorn

Ensure your Django project’s wsgi.py is correctly set up as the entry point for Gunicorn:

python

# pro/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pro.settings.production')
application = get_wsgi_application()

4. Gunicorn Configuration

Create a Gunicorn systemd service file to ensure Gunicorn starts with the system.

Create the file /etc/systemd/system/gunicorn.service:

bash

sudo nano /etc/systemd/system/gunicorn.service

Add the following content to the file:

ini

[Unit]
Description=gunicorn daemon for Django project
After=network.target

[Service]
User=g2019supersam
Group=www-data
WorkingDirectory=/home/g2019supersam/apps/zyxe/pro
ExecStart=/home/g2019supersam/apps/zyxe/pro/env/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/g2019supersam/apps/zyxe/pro/gunicorn.sock pro.wsgi:application

[Install]
WantedBy=multi-user.target

How to enable Gunicorn:

    Reload systemd to read the new service file:

    bash

    sudo systemctl daemon-reload
    sudo systemctl start gunicorn
    sudo systemctl enable gunicorn

5. Nginx Configuration

Nginx will serve as a reverse proxy for Gunicorn. Create a new Nginx configuration file for your project:

Edit /etc/nginx/sites-available/zyxe:

bash

sudo nano /etc/nginx/sites-available/zyxe

Add this Nginx configuration:

nginx

server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/g2019supersam/apps/zyxe/pro;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/g2019supersam/apps/zyxe/pro/gunicorn.sock;
    }
}

Enable the site and reload Nginx:

bash

sudo ln -s /etc/nginx/sites-available/zyxe /etc/nginx/sites-enabled
sudo nginx -t
sudo systemctl reload nginx

6. Collect Static Files

Ensure you collect static files into the /static directory and that they are served by Nginx:

bash

export DJANGO_ENV=production
python manage.py collectstatic

7. Set Proper Permissions

Ensure that your directories and files are owned by the correct users and groups (like www-data for Nginx):

bash

sudo chown -R g2019supersam:www-data /home/g2019supersam/apps/zyxe/pro
sudo chmod -R 755 /home/g2019supersam/apps/zyxe/pro

8. Testing and Final Steps

    Restart Gunicorn and Nginx:

    bash

    sudo systemctl restart gunicorn
    sudo systemctl reload nginx

    Visit your website to ensure everything is running correctly.

By saving your configuration files (.env, Gunicorn service, Nginx config) in the appropriate places, you’ll have a structured Django project ready for production. Let me know if you need further clarification or help with any specific steps!





find . -path "*/migrations" -type d -exec rm -r {} +


Setup Development Environment:
pip install django
pip install python-dotenv
pip install django-phonenumber-field
pip install phonenumbers

python manage.py makemigrations authenticate
python manage.py makemigrations employer_profile
python manage.py makemigrations employer_job
python manage.py makemigrations employer_skill
python manage.py makemigrations pro_profile
python manage.py makemigrations pro_education
python manage.py makemigrations pro_experience
python manage.py makemigrations pro_skills
python manage.py makemigrations freelancer_experience
python manage.py migrate

python manage.py createsuperuser
